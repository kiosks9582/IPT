#IndiaAssetsS3toLocalState
$myDownloadUrl_AssetsZipS3 = "https://github.com/kiosks9582/IPT/raw/main/File1.zip"

$KioskInstallerPath = "c:\KIOSK INSTALLER\"
$zipFileName = "OrderServ.Kiosk.India.Package_1.0.52.0_Test"
$zipExtension = ".zip"
$path_AssetsZipS3 = $KioskInstallerPath + $zipFileName + $zipExtension

#iex ((New-Object System.Net.WebClient).DownloadString('https://kiosk-support-india-files.s3.ap-south-1.amazonaws.com/File2'))

If (Test-Path "C:\KioskInstaller") {
    Rename-Item "C:\KIOSKINSTALLER" "Kiosk Installer"
}
 
Set-Location c:\
$PWD.PATH
#ls
Write-Host""
If (!(Test-Path "C:\Kiosk Installer")) {
    mkdir "KIOSK INSTALLER"
}
 
Set-Location '.\KIOSK INSTALLER\'
$PWD.PATH
#ls
Write-Host""
if (Test-Path $path_AssetsZipS3) { 
    Write-Host "Message : Old $path_AssetsZipS3 zip file found, deleting now"
    Remove-Item $path_AssetsZipS3 -Recurse -Force
    $PWD.PATH
    ls
    Write-Host""
}
Set-Location "c:\KIOSK INSTALLER"
$PWD.PATH
#ls
if (Test-Path $zipFileName) { 
    "Message : Old Asset folder file found, deleting now $zipFileName"
    Remove-Item $zipFileName -Recurse -Force
    $PWD.PATH
    ls
    Write-Host""
}
Write-Host "Message : Downloading File"
function DownloadFile($url, $targetFile) {
    $uri = New-Object "System.Uri" "$url"
 
    $request = [System.Net.HttpWebRequest]::Create($uri)
 
    $request.set_Timeout(15000) #15 second timeout
 
    $response = $request.GetResponse()
 
    $totalLength = [System.Math]::Floor($response.get_ContentLength() / 1024)
 
    $responseStream = $response.GetResponseStream()
 
    $targetStream = New-Object -TypeName System.IO.FileStream -ArgumentList $targetFile, Create
 
    $buffer = new-object byte[] 10000KB
 
    $count = $responseStream.Read($buffer, 0, $buffer.length)
 
    $downloadedBytes = $count
    $stopwatch = New-Object System.Diagnostics.Stopwatch
    $stopwatch.Start()
    while ($count -gt 0) {
 
        $targetStream.Write($buffer, 0, $count)
 
        $count = $responseStream.Read($buffer, 0, $buffer.length)
 
        $downloadedBytes = $downloadedBytes + $count
    
        $downloadedper2 = ((([System.Math]::Floor($downloadedBytes / 1024)) / $totalLength) * 100)

        $DownloadMB = $downloadedBytes/(1024*1024)    



  # Check if elapsed time is greater than or equal to 5 seconds
  if ($stopwatch.ElapsedMilliseconds -ge 5000) {
    Write-Host "Download % = $downloadedper2 , Size = $DownloadMB"
    
    
    $stopwatch.Restart()  # Reset stopwatch to track next interval
  }

        # $downloadedper2
        # (Get-ChildItem | Sort-Object LastWriteTime -Descending | Where-Object { $_.Name -match '1.0.52.0' } | Select-Object -First 1)

 
#Write-Progress -activity "Downloading file '$($url.split('/') | Select -Last 1)'" -status "Downloaded ($([System.Math]::Floor($downloadedBytes/1024))K of $($totalLength)K): " -PercentComplete ((([System.Math]::Floor($downloadedBytes / 1024)) / $totalLength) * 100)
 
}
 
Write-Progress -activity "Finished downloading file '$($url.split('/') | Select -Last 1)'"
 
$targetStream.Flush()
 
$targetStream.Close()
 
$targetStream.Dispose()
 
$responseStream.Dispose()
 
}
downloadFile $myDownloadUrl_AssetsZipS3  $path_AssetsZipS3
#ls
Write-Host "Message : File Downloaded"
(Get-ChildItem | Sort-Object LastWriteTime -Descending | Where-Object { $_.Name -match '1.0.52.0' } | Select-Object -First 1)